type (
	reqStockId {
		Id int32 `path:"id"`
	}

	DetailMessage {
		Id               int32   `json:"id"`
		StockName        string  `json:"stockName"`
		StockCode        string  `json:"stockCode"`
		TodayOpenPrice   float32 `json:"todayOpenPrice"`
		LastClosePrice   float32 `json:"lastClosePrice"`
		PresentPrice     float32 `json:"presentPrice"`
		HighPrice        float32 `json:"highPrice"`
		LowPrice         float32 `json:"lowPrice"`
		CurrentBuyPrice  float32 `json:"currentBuyPrice"`
		CurrentSellPrice float32 `json:"currentSellPrice"`
		TransCount       int32   `json:"transCount"`
		TransAmount      float32 `json:"transAmount"`

		BuyOneCount   int32   `json:"buyOneCount"`
		BuyOnePrice   float32 `json:"buyOnePrice"`
		BuyTwoCount   int32   `json:"buyTwoCount"`
		BuyTwoPrice   float32 `json:"buyTwoPrice"`
		BuyThreeCount int32   `json:"buyThreeCount"`
		BuyThreePrice float32 `json:"buyThreePrice"`
		BuyFourCount  int32   `json:"buyFourCount"`
		BuyFourPrice  float32 `json:"buyFourPrice"`
		BuyFiveCount  int32   `json:"buyFiveCount"`
		BuyFivePrice  float32 `json:"buyFivePrice"`

		SellOneCount   int32   `json:"sellOneCount"`
		SellOnePrice   float32 `json:"sellOnePrice"`
		SellTwoCount   int32   `json:"sellTwoCount"`
		SellTwoPrice   float32 `json:"sellTwoPrice"`
		SellThreeCount int32   `json:"sellThreeCount"`
		SellThreePrice float32 `json:"sellThreePrice"`
		SellFourCount  int32   `json:"sellFourCount"`
		SellFourPrice  float32 `json:"sellFourPrice"`
		SellFiveCount  int32   `json:"sellFiveCount"`
		SellFivePrice  float32 `json:"sellFivePrice"`

		CurrentTime string `json:"currentTime"`
	}

	DetailMeta {
		Msg    string `json:"msg""`
		Status int16  `json:"status"`
	}

	respStockDetail {
		DetailMessage
		DetailMeta
	}

	reqStockCreate {
		StockName string `json:"stockName"`
		StockCode string `json:"stockCode"`
	}

	reqStockList {
		Pn    int `json:"pn,default=0"`
		PSize int `json:"psize,default=10"`
	}

	ListMeta {
		Msg    string `json:"msg""`
		Status int16  `json:"status"`
	}

	respStockList {
		StockList []string `json:"stocklist"`
		ListMeta
	}

	reqStockByCode {
		StockCode string `form:"code"`
	}

	reqStockByName {
		StockName string `form:"name"`
	}
)

@server (
	jwt: Auth
	group: stock
)
service stock-api {
	@handler detail
	get /api/v1/stock/:id (reqStockId) returns (respStockDetail)
	
	@handler GetStockList
	get /api/v1/stock (reqStockList) returns (respStockList)
	
	// 名字获取 代码获取 这两个都是在搜索时应用 用户通过搜索获取id进行收藏 或者 买入
	// 暂时将其分为搜索名称 和 搜索代码两个功能
	@handler GetStockByCode
	get /api/v1/stock/searchcode (reqStockByCode) returns (respStockDetail)
	
	@handler GetStockByName
	get /api/v1/stock/searchname (reqStockByName) returns (respStockDetail)
	
}

// goctl api go -api stock.api -dir .
// 这个创建需要jwt 和 auth 验证 必须管理员才能创建
@server (
	// -H 'authorization: eyJhbGciOiJIUzI1NiIsInR5cCI6I'
	jwt: Auth
	middleware: Admin
	group: stock
)
service stock-api {
	@handler create
	post /api/v1/stock/create (reqStockCreate) returns (respStockDetail)
	
	// 修改 更新 删除 需要验证用户权限
	// 既然创建是管理员完成的 那么暂时就不会有错 将来实现
}