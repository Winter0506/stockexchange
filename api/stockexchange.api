syntax = "v1"

info(
	title: "模拟股票交易"
	desc: "一个小项目"
	author: "wangqichao"
	email: "1569770895@qq.com"
)

type respUserLogin {
	LoginMessage
	LoginMeta
}

type reqUserLogin {
	Email    string `json:"email" binding:"required, email"`
	Password string `json:"password" binding:"required, min=6, max=10"`
}

// json 和 form 体现在代码上的区别
// https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/mapping.md 会对参数进行校验
type reqUserRegister {
	UserName string `json:"username" binding:"required,max=10"`
	Password string `json:"password" binding:"required, min=6, max=10"`
	Email    string `json:"email" binding:"required, email"`
	Gender   string `json:"password" binding:"required"`
	Code     string `json:"code" binding:"required,min=6,max=6"`
	//	Captcha   string `form:"captcha" json:"captcha" binding:"required,min=4,max=4"`
	//	CaptchaId string `form:"captcha_id" json:"captcha_id" binding:"required"`
}

type LoginMessage {
	Id          int64  `json:"id"`
	Username    string `json:"username"`
	Password    string `json:"password"`
	Email       string `json:"email"`
	Gender      string `json:"gender"`
	Role        int32  `json:"role"`
	AccessToken string `json:"token"`
}

type LoginMeta {
	Msg    string `json:"msg""`
	Status int16  `json:"status"`
}

// 这只是一个service  其他的service怎么办? 事实上只能有一个service
// 执行命令 goctl api -o stockexchange.api   创建 blog.api 文件。
// 执行命令 goctl api go -api stockexchange.api -dir . 生成 api 相关代码
service stockexchange {
	// 还没有写的路由
	//	@handler GetUserList
	//	get /api/v1/user returns ([]userInfoResponse)
	
	@handler Login
	post /api/v1/user/login (reqUserLogin) returns (respUserLogin)
	
	// 注册的时候也不用写Auth 与 jwt  同时注册成功直接就可以相当于 登录完成
	@handler Register
	post /api/v1/user/register (reqUserRegister) returns (respUserLogin)
	//
	//	@handler Detail
	//	get /api/v1/user/detail
	//
	//	@handler Update
	//	patch /api/v1/user/update
}