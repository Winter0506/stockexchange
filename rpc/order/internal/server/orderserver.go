// Code generated by goctl. DO NOT EDIT!
// Source: order.proto

package server

import (
	"context"

	"stockexchange/rpc/order/internal/logic"
	"stockexchange/rpc/order/internal/svc"
	"stockexchange/rpc/order/order"
)

type OrderServer struct {
	svcCtx *svc.ServiceContext
}

func NewOrderServer(svcCtx *svc.ServiceContext) *OrderServer {
	return &OrderServer{
		svcCtx: svcCtx,
	}
}

//  账户相关
func (s *OrderServer) GetUserAccount(ctx context.Context, in *order.IdRequest) (*order.UserAccountResponse, error) {
	l := logic.NewGetUserAccountLogic(ctx, s.svcCtx)
	return l.GetUserAccount(in)
}

func (s *OrderServer) CreateUserAccount(ctx context.Context, in *order.CreateUserAccountInfo) (*order.UserAccountResponse, error) {
	l := logic.NewCreateUserAccountLogic(ctx, s.svcCtx)
	return l.CreateUserAccount(in)
}

func (s *OrderServer) UpdateUserAccount(ctx context.Context, in *order.UpdateUserAccountInfo) (*order.UserAccountResponse, error) {
	l := logic.NewUpdateUserAccountLogic(ctx, s.svcCtx)
	return l.UpdateUserAccount(in)
}

func (s *OrderServer) GetUserAccountList(ctx context.Context, in *order.PageInfo) (*order.UserAccountListResponse, error) {
	l := logic.NewGetUserAccountListLogic(ctx, s.svcCtx)
	return l.GetUserAccountList(in)
}

func (s *OrderServer) DeleteUserAccount(ctx context.Context, in *order.DeleteUserAccountInfo) (*order.DeleteUserAccountResponse, error) {
	l := logic.NewDeleteUserAccountLogic(ctx, s.svcCtx)
	return l.DeleteUserAccount(in)
}

//  持仓相关
func (s *OrderServer) GetHoldPosition(ctx context.Context, in *order.HoldPositionRequest) (*order.HoldPositionResponse, error) {
	l := logic.NewGetHoldPositionLogic(ctx, s.svcCtx)
	return l.GetHoldPosition(in)
}

func (s *OrderServer) GetHoldPositionList(ctx context.Context, in *order.UserHoldPositionRequest) (*order.HoldPositionListResponse, error) {
	l := logic.NewGetHoldPositionListLogic(ctx, s.svcCtx)
	return l.GetHoldPositionList(in)
}

//  实际上用户是不能直接操作下面这三个方法的 这里写出来只是当作思路  ==== 所以在rpc中并没有写出这三个的逻辑 ====
func (s *OrderServer) CreateHoldPosition(ctx context.Context, in *order.CreateHoldPositionRequest) (*order.HoldPositionResponse, error) {
	l := logic.NewCreateHoldPositionLogic(ctx, s.svcCtx)
	return l.CreateHoldPosition(in)
}

func (s *OrderServer) UpdateHoldPosition(ctx context.Context, in *order.UpdateHoldPositionRequest) (*order.HoldPositionResponse, error) {
	l := logic.NewUpdateHoldPositionLogic(ctx, s.svcCtx)
	return l.UpdateHoldPosition(in)
}

//  卖出的时候 正好一点不留 就用delete
func (s *OrderServer) DeleteHoldPosition(ctx context.Context, in *order.DeleteHoldPositionRequest) (*order.DeleteHoldPositionResponse, error) {
	l := logic.NewDeleteHoldPositionLogic(ctx, s.svcCtx)
	return l.DeleteHoldPosition(in)
}

//  委托相关
func (s *OrderServer) CreateTrustItem(ctx context.Context, in *order.TrustItemRequest) (*order.TrustInfoResponse, error) {
	l := logic.NewCreateTrustItemLogic(ctx, s.svcCtx)
	return l.CreateTrustItem(in)
}

func (s *OrderServer) TrustItemList(ctx context.Context, in *order.UserTrustInfoRequest) (*order.TrustListResponse, error) {
	l := logic.NewTrustItemListLogic(ctx, s.svcCtx)
	return l.TrustItemList(in)
}

func (s *OrderServer) TrustItemDetail(ctx context.Context, in *order.TrustInfoRequest) (*order.TrustInfoResponse, error) {
	l := logic.NewTrustItemDetailLogic(ctx, s.svcCtx)
	return l.TrustItemDetail(in)
}

func (s *OrderServer) UpdateTrustItem(ctx context.Context, in *order.UpdateTrustRequest) (*order.TrustInfoResponse, error) {
	l := logic.NewUpdateTrustItemLogic(ctx, s.svcCtx)
	return l.UpdateTrustItem(in)
}

func (s *OrderServer) DeleteTrustItem(ctx context.Context, in *order.DeleteTrustRequest) (*order.DeleteTrustResponse, error) {
	l := logic.NewDeleteTrustItemLogic(ctx, s.svcCtx)
	return l.DeleteTrustItem(in)
}

//  订单相关
func (s *OrderServer) CreateOrderItem(ctx context.Context, in *order.OrderItemRequest) (*order.OrderInfoResponse, error) {
	l := logic.NewCreateOrderItemLogic(ctx, s.svcCtx)
	return l.CreateOrderItem(in)
}

func (s *OrderServer) OrderItemList(ctx context.Context, in *order.UserOrderInfoRequest) (*order.OrderListResponse, error) {
	l := logic.NewOrderItemListLogic(ctx, s.svcCtx)
	return l.OrderItemList(in)
}

func (s *OrderServer) OrderItemDetail(ctx context.Context, in *order.OrderInfoRequest) (*order.OrderInfoResponse, error) {
	l := logic.NewOrderItemDetailLogic(ctx, s.svcCtx)
	return l.OrderItemDetail(in)
}

func (s *OrderServer) UpdateOrderItem(ctx context.Context, in *order.UpdateOrderRequest) (*order.OrderInfoResponse, error) {
	l := logic.NewUpdateOrderItemLogic(ctx, s.svcCtx)
	return l.UpdateOrderItem(in)
}

func (s *OrderServer) DeleteOrderItem(ctx context.Context, in *order.DeleteOrderRequest) (*order.DeleteOrderResponse, error) {
	l := logic.NewDeleteOrderItemLogic(ctx, s.svcCtx)
	return l.DeleteOrderItem(in)
}
