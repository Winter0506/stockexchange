// Code generated by goctl. DO NOT EDIT!
// Source: order.proto

package orderclient

import (
	"context"

	"stockexchange/rpc/order/order"

	"github.com/tal-tech/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	CreateHoldPositionRequest  = order.CreateHoldPositionRequest
	CreateUserAccountInfo      = order.CreateUserAccountInfo
	DeleteHoldPositionRequest  = order.DeleteHoldPositionRequest
	DeleteHoldPositionResponse = order.DeleteHoldPositionResponse
	DeleteOrderRequest         = order.DeleteOrderRequest
	DeleteOrderResponse        = order.DeleteOrderResponse
	DeleteTrustRequest         = order.DeleteTrustRequest
	DeleteTrustResponse        = order.DeleteTrustResponse
	DeleteUserAccountInfo      = order.DeleteUserAccountInfo
	DeleteUserAccountResponse  = order.DeleteUserAccountResponse
	Empty                      = order.Empty
	HoldPositionListResponse   = order.HoldPositionListResponse
	HoldPositionRequest        = order.HoldPositionRequest
	HoldPositionResponse       = order.HoldPositionResponse
	IdRequest                  = order.IdRequest
	OrderInfoRequest           = order.OrderInfoRequest
	OrderInfoResponse          = order.OrderInfoResponse
	OrderItemRequest           = order.OrderItemRequest
	OrderListResponse          = order.OrderListResponse
	PageInfo                   = order.PageInfo
	TrustInfoRequest           = order.TrustInfoRequest
	TrustInfoResponse          = order.TrustInfoResponse
	TrustItemRequest           = order.TrustItemRequest
	TrustListResponse          = order.TrustListResponse
	UpdateHoldPositionRequest  = order.UpdateHoldPositionRequest
	UpdateOrderRequest         = order.UpdateOrderRequest
	UpdateTrustRequest         = order.UpdateTrustRequest
	UpdateUserAccountInfo      = order.UpdateUserAccountInfo
	UserAccountListResponse    = order.UserAccountListResponse
	UserAccountResponse        = order.UserAccountResponse
	UserHoldPositionRequest    = order.UserHoldPositionRequest
	UserOrderInfoRequest       = order.UserOrderInfoRequest
	UserTrustInfoRequest       = order.UserTrustInfoRequest

	Order interface {
		//  账户相关
		GetUserAccount(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*UserAccountResponse, error)
		CreateUserAccount(ctx context.Context, in *CreateUserAccountInfo, opts ...grpc.CallOption) (*UserAccountResponse, error)
		UpdateUserAccount(ctx context.Context, in *UpdateUserAccountInfo, opts ...grpc.CallOption) (*UserAccountResponse, error)
		GetUserAccountList(ctx context.Context, in *PageInfo, opts ...grpc.CallOption) (*UserAccountListResponse, error)
		DeleteUserAccount(ctx context.Context, in *DeleteUserAccountInfo, opts ...grpc.CallOption) (*DeleteUserAccountResponse, error)
		//  持仓相关
		GetHoldPosition(ctx context.Context, in *HoldPositionRequest, opts ...grpc.CallOption) (*HoldPositionResponse, error)
		GetHoldPositionList(ctx context.Context, in *UserHoldPositionRequest, opts ...grpc.CallOption) (*HoldPositionListResponse, error)
		//  实际上用户是不能直接操作下面这三个方法的 这里写出来只是当作思路  ==== 所以在rpc中并没有写出这三个的逻辑 ====
		CreateHoldPosition(ctx context.Context, in *CreateHoldPositionRequest, opts ...grpc.CallOption) (*HoldPositionResponse, error)
		UpdateHoldPosition(ctx context.Context, in *UpdateHoldPositionRequest, opts ...grpc.CallOption) (*HoldPositionResponse, error)
		//  卖出的时候 正好一点不留 就用delete
		DeleteHoldPosition(ctx context.Context, in *DeleteHoldPositionRequest, opts ...grpc.CallOption) (*DeleteHoldPositionResponse, error)
		//  委托相关
		CreateTrustItem(ctx context.Context, in *TrustItemRequest, opts ...grpc.CallOption) (*TrustInfoResponse, error)
		TrustItemList(ctx context.Context, in *UserTrustInfoRequest, opts ...grpc.CallOption) (*TrustListResponse, error)
		TrustItemDetail(ctx context.Context, in *TrustInfoRequest, opts ...grpc.CallOption) (*TrustInfoResponse, error)
		UpdateTrustItem(ctx context.Context, in *UpdateTrustRequest, opts ...grpc.CallOption) (*TrustInfoResponse, error)
		DeleteTrustItem(ctx context.Context, in *DeleteTrustRequest, opts ...grpc.CallOption) (*DeleteTrustResponse, error)
		//  订单相关
		CreateOrderItem(ctx context.Context, in *OrderItemRequest, opts ...grpc.CallOption) (*OrderInfoResponse, error)
		OrderItemList(ctx context.Context, in *UserOrderInfoRequest, opts ...grpc.CallOption) (*OrderListResponse, error)
		OrderItemDetail(ctx context.Context, in *OrderInfoRequest, opts ...grpc.CallOption) (*OrderInfoResponse, error)
		UpdateOrderItem(ctx context.Context, in *UpdateOrderRequest, opts ...grpc.CallOption) (*OrderInfoResponse, error)
		DeleteOrderItem(ctx context.Context, in *DeleteOrderRequest, opts ...grpc.CallOption) (*DeleteOrderResponse, error)
	}

	defaultOrder struct {
		cli zrpc.Client
	}
)

func NewOrder(cli zrpc.Client) Order {
	return &defaultOrder{
		cli: cli,
	}
}

//  账户相关
func (m *defaultOrder) GetUserAccount(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*UserAccountResponse, error) {
	client := order.NewOrderClient(m.cli.Conn())
	return client.GetUserAccount(ctx, in, opts...)
}

func (m *defaultOrder) CreateUserAccount(ctx context.Context, in *CreateUserAccountInfo, opts ...grpc.CallOption) (*UserAccountResponse, error) {
	client := order.NewOrderClient(m.cli.Conn())
	return client.CreateUserAccount(ctx, in, opts...)
}

func (m *defaultOrder) UpdateUserAccount(ctx context.Context, in *UpdateUserAccountInfo, opts ...grpc.CallOption) (*UserAccountResponse, error) {
	client := order.NewOrderClient(m.cli.Conn())
	return client.UpdateUserAccount(ctx, in, opts...)
}

func (m *defaultOrder) GetUserAccountList(ctx context.Context, in *PageInfo, opts ...grpc.CallOption) (*UserAccountListResponse, error) {
	client := order.NewOrderClient(m.cli.Conn())
	return client.GetUserAccountList(ctx, in, opts...)
}

func (m *defaultOrder) DeleteUserAccount(ctx context.Context, in *DeleteUserAccountInfo, opts ...grpc.CallOption) (*DeleteUserAccountResponse, error) {
	client := order.NewOrderClient(m.cli.Conn())
	return client.DeleteUserAccount(ctx, in, opts...)
}

//  持仓相关
func (m *defaultOrder) GetHoldPosition(ctx context.Context, in *HoldPositionRequest, opts ...grpc.CallOption) (*HoldPositionResponse, error) {
	client := order.NewOrderClient(m.cli.Conn())
	return client.GetHoldPosition(ctx, in, opts...)
}

func (m *defaultOrder) GetHoldPositionList(ctx context.Context, in *UserHoldPositionRequest, opts ...grpc.CallOption) (*HoldPositionListResponse, error) {
	client := order.NewOrderClient(m.cli.Conn())
	return client.GetHoldPositionList(ctx, in, opts...)
}

//  实际上用户是不能直接操作下面这三个方法的 这里写出来只是当作思路  ==== 所以在rpc中并没有写出这三个的逻辑 ====
func (m *defaultOrder) CreateHoldPosition(ctx context.Context, in *CreateHoldPositionRequest, opts ...grpc.CallOption) (*HoldPositionResponse, error) {
	client := order.NewOrderClient(m.cli.Conn())
	return client.CreateHoldPosition(ctx, in, opts...)
}

func (m *defaultOrder) UpdateHoldPosition(ctx context.Context, in *UpdateHoldPositionRequest, opts ...grpc.CallOption) (*HoldPositionResponse, error) {
	client := order.NewOrderClient(m.cli.Conn())
	return client.UpdateHoldPosition(ctx, in, opts...)
}

//  卖出的时候 正好一点不留 就用delete
func (m *defaultOrder) DeleteHoldPosition(ctx context.Context, in *DeleteHoldPositionRequest, opts ...grpc.CallOption) (*DeleteHoldPositionResponse, error) {
	client := order.NewOrderClient(m.cli.Conn())
	return client.DeleteHoldPosition(ctx, in, opts...)
}

//  委托相关
func (m *defaultOrder) CreateTrustItem(ctx context.Context, in *TrustItemRequest, opts ...grpc.CallOption) (*TrustInfoResponse, error) {
	client := order.NewOrderClient(m.cli.Conn())
	return client.CreateTrustItem(ctx, in, opts...)
}

func (m *defaultOrder) TrustItemList(ctx context.Context, in *UserTrustInfoRequest, opts ...grpc.CallOption) (*TrustListResponse, error) {
	client := order.NewOrderClient(m.cli.Conn())
	return client.TrustItemList(ctx, in, opts...)
}

func (m *defaultOrder) TrustItemDetail(ctx context.Context, in *TrustInfoRequest, opts ...grpc.CallOption) (*TrustInfoResponse, error) {
	client := order.NewOrderClient(m.cli.Conn())
	return client.TrustItemDetail(ctx, in, opts...)
}

func (m *defaultOrder) UpdateTrustItem(ctx context.Context, in *UpdateTrustRequest, opts ...grpc.CallOption) (*TrustInfoResponse, error) {
	client := order.NewOrderClient(m.cli.Conn())
	return client.UpdateTrustItem(ctx, in, opts...)
}

func (m *defaultOrder) DeleteTrustItem(ctx context.Context, in *DeleteTrustRequest, opts ...grpc.CallOption) (*DeleteTrustResponse, error) {
	client := order.NewOrderClient(m.cli.Conn())
	return client.DeleteTrustItem(ctx, in, opts...)
}

//  订单相关
func (m *defaultOrder) CreateOrderItem(ctx context.Context, in *OrderItemRequest, opts ...grpc.CallOption) (*OrderInfoResponse, error) {
	client := order.NewOrderClient(m.cli.Conn())
	return client.CreateOrderItem(ctx, in, opts...)
}

func (m *defaultOrder) OrderItemList(ctx context.Context, in *UserOrderInfoRequest, opts ...grpc.CallOption) (*OrderListResponse, error) {
	client := order.NewOrderClient(m.cli.Conn())
	return client.OrderItemList(ctx, in, opts...)
}

func (m *defaultOrder) OrderItemDetail(ctx context.Context, in *OrderInfoRequest, opts ...grpc.CallOption) (*OrderInfoResponse, error) {
	client := order.NewOrderClient(m.cli.Conn())
	return client.OrderItemDetail(ctx, in, opts...)
}

func (m *defaultOrder) UpdateOrderItem(ctx context.Context, in *UpdateOrderRequest, opts ...grpc.CallOption) (*OrderInfoResponse, error) {
	client := order.NewOrderClient(m.cli.Conn())
	return client.UpdateOrderItem(ctx, in, opts...)
}

func (m *defaultOrder) DeleteOrderItem(ctx context.Context, in *DeleteOrderRequest, opts ...grpc.CallOption) (*DeleteOrderResponse, error) {
	client := order.NewOrderClient(m.cli.Conn())
	return client.DeleteOrderItem(ctx, in, opts...)
}
