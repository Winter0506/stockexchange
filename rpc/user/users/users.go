// Code generated by goctl. DO NOT EDIT!
// Source: user.proto

package users

import (
	"context"

	"stockexchange/rpc/user/user"

	"github.com/tal-tech/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	CommResp   = user.CommResp
	LoginReq   = user.LoginReq
	ReqGetAll  = user.ReqGetAll
	ReqUser    = user.ReqUser
	ReqUserId  = user.ReqUserId
	RespGetAll = user.RespGetAll
	RespLogin  = user.RespLogin
	User       = user.User

	Users interface {
		Login(ctx context.Context, in *ReqUser, opts ...grpc.CallOption) (*RespLogin, error)
		Create(ctx context.Context, in *ReqUser, opts ...grpc.CallOption) (*CommResp, error)
		Update(ctx context.Context, in *User, opts ...grpc.CallOption) (*CommResp, error)
		Delete(ctx context.Context, in *ReqUserId, opts ...grpc.CallOption) (*CommResp, error)
		Get(ctx context.Context, in *ReqUserId, opts ...grpc.CallOption) (*User, error)
		GetAll(ctx context.Context, in *ReqGetAll, opts ...grpc.CallOption) (*RespGetAll, error)
	}

	defaultUsers struct {
		cli zrpc.Client
	}
)

func NewUsers(cli zrpc.Client) Users {
	return &defaultUsers{
		cli: cli,
	}
}

func (m *defaultUsers) Login(ctx context.Context, in *ReqUser, opts ...grpc.CallOption) (*RespLogin, error) {
	client := user.NewUsersClient(m.cli.Conn())
	return client.Login(ctx, in, opts...)
}

func (m *defaultUsers) Create(ctx context.Context, in *ReqUser, opts ...grpc.CallOption) (*CommResp, error) {
	client := user.NewUsersClient(m.cli.Conn())
	return client.Create(ctx, in, opts...)
}

func (m *defaultUsers) Update(ctx context.Context, in *User, opts ...grpc.CallOption) (*CommResp, error) {
	client := user.NewUsersClient(m.cli.Conn())
	return client.Update(ctx, in, opts...)
}

func (m *defaultUsers) Delete(ctx context.Context, in *ReqUserId, opts ...grpc.CallOption) (*CommResp, error) {
	client := user.NewUsersClient(m.cli.Conn())
	return client.Delete(ctx, in, opts...)
}

func (m *defaultUsers) Get(ctx context.Context, in *ReqUserId, opts ...grpc.CallOption) (*User, error) {
	client := user.NewUsersClient(m.cli.Conn())
	return client.Get(ctx, in, opts...)
}

func (m *defaultUsers) GetAll(ctx context.Context, in *ReqGetAll, opts ...grpc.CallOption) (*RespGetAll, error) {
	client := user.NewUsersClient(m.cli.Conn())
	return client.GetAll(ctx, in, opts...)
}
